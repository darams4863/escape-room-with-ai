services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: escape_room_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-escape_room_db}
      POSTGRES_USER: ${POSTGRES_USER:-escape_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TZ: Asia/Seoul
      PGTZ: Asia/Seoul
    ports:
      - "5433:5432"  # 호스트(로컬) 포트:컨테이너 내부 포트
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # 초기 스키마
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U escape_user -d escape_room_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: escape_room_redis
    ports:
      - "6379:6379"  # 로컬에서 직접 접근 가능
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: escape_room_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RMQ_USERNAME:-guest}
      RABBITMQ_DEFAULT_PASS: ${RMQ_PASSWORD:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RMQ_VHOST:-/}
    ports:
      - "5672:5672"   # AMQP 포트
      - "15672:15672" # Management UI 포트
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  fastapi:
    build: .  # 로컬에서 빌드
    container_name: escape_room_api
    ports:
      - "8000:8000"
      - "8001:8001"  # Prometheus 메트릭 포트
    environment:
      - DATABASE_URL=postgresql://escape_user:${POSTGRES_PASSWORD:-escape_password}@postgres:5432/escape_room_db
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - RMQ_HOST=${RMQ_HOST:-rabbitmq}
      - RMQ_PORT=${RMQ_PORT:-5672}
      - RMQ_USERNAME=${RMQ_USERNAME:-guest}
      - RMQ_PASSWORD=${RMQ_PASSWORD:-guest}
      - RMQ_VHOST=${RMQ_VHOST:-/}
      - DEBUG=${DEBUG:-true}
    volumes:
      - ./:/workspace  # 전체 프로젝트 마운트
    working_dir: /workspace  # 작업 디렉토리 설정
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload  # 올바른 경로
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: escape_room_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: escape_room_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped

  # Node Exporter (시스템 메트릭 수집)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: escape_room_node_exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - /:/host:ro,rslave
    restart: unless-stopped


volumes:
  postgres_data:
    driver: local  # 로컬 개발용
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local  # RabbitMQ 데이터 영구 저장
  rabbitmq_logs:
    driver: local  # RabbitMQ 로그 저장
  prometheus_data:
    driver: local  # Prometheus 데이터 저장
  grafana_data:
    driver: local  # Grafana 데이터 저장
